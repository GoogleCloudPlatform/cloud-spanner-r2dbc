/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.spanner.r2dbc.it;

import static com.google.cloud.spanner.r2dbc.SpannerConnectionFactoryProvider.DRIVER_NAME;
import static com.google.cloud.spanner.r2dbc.SpannerConnectionFactoryProvider.INSTANCE;
import static com.google.cloud.spanner.r2dbc.it.SpannerIT.TEST_DATABASE;
import static com.google.cloud.spanner.r2dbc.it.SpannerIT.TEST_INSTANCE;
import static io.r2dbc.spi.ConnectionFactoryOptions.DATABASE;
import static io.r2dbc.spi.ConnectionFactoryOptions.DRIVER;

import com.google.cloud.ServiceOptions;
import io.r2dbc.spi.ConnectionFactories;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.ConnectionFactoryOptions;
import io.r2dbc.spi.Option;
import io.r2dbc.spi.test.Example;
import org.springframework.jdbc.core.JdbcOperations;

/**
 * Tests based on "TCK" Example.java from r2dbc-spi-test.
 */
public class SpannerExample implements Example<String> {

  private static final ConnectionFactory connectionFactory =
      ConnectionFactories.get(ConnectionFactoryOptions.builder()
          .option(Option.valueOf("project"), ServiceOptions.getDefaultProjectId())
          .option(DRIVER, DRIVER_NAME)
          .option(INSTANCE, TEST_INSTANCE)
          .option(DATABASE, TEST_DATABASE)
          .build());

  @Override
  public ConnectionFactory getConnectionFactory() {
    return connectionFactory;
  }

  @Override
  public String getCreateTableWithAutogeneratedKey() {
    return "CREATE TABLE test ( id INT64 NOT NULL, value INT64 NOT NULL ) PRIMARY KEY (id)";
  }

  @Override
  public String getIdentifier(int index) {
    return getPlaceholder(index);
  }

  @Override
  public JdbcOperations getJdbcOperations() {
    // TCK tests only use this object for the .execute() method to create and delete tables.
    return null;
  }

  @Override
  public String getPlaceholder(int index) {
    return "@Param" + index;
  }
}
